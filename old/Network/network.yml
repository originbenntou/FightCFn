AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Network resource template

# Metadata:

Parameters:
  ProjectName:
    Type: String
    Default: fight
    Description: Project Name
  Env:
    Type: String
    Default: dev
    Description: Environment

Mappings:
  SubnetConfig:
    CIDR:
      VPC: '10.0.0.0/16'
      PublicSubnetA: '10.0.0.0/24'
      PublicSubnetC: '10.0.1.0/24'
      PrivateSubnetA: '10.0.8.0/24'
      PrivateSubnetC: '10.0.9.0/24'
      PrivateSubnetADB: '10.0.16.0/24'
      PrivateSubnetCDB: '10.0.17.0/24'
      PublicSubnetABastion: '10.0.240.0/24'
      PublicSubnetCBastion: '10.0.241.0/24'

# Conditions:
# Transform:

Resources:
  #########################################
  # VPC
  #########################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true # TODO: 固定IPが必要ないならfalseにしたい
      EnableDnsHostnames: true # TODO: falseにしたい
      CidrBlock: !FindInMap [SubnetConfig, CIDR, VPC]
      Tags:
        - Key: 'ProjectName'
          Value: !Ref ProjectName

  #########################################
  # PublicSubnet A,C
  # For Ingress
  #########################################
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, CIDR, PublicSubnetA]
      # MapPublicIpOnLaunch: true
      Tags:
        - Key: 'ProjectName'
          Value: !Ref ProjectName
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, CIDR, PublicSubnetC]
      # MapPublicIpOnLaunch: true
      Tags:
        - Key: 'ProjectName'
          Value: !Ref ProjectName

  #########################################
  # PrivateSubnet A,C
  # For ECS Task
  #########################################
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, CIDR, PrivateSubnetA]
      Tags:
        - Key: 'ProjectName'
          Value: !Ref ProjectName
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, CIDR, PrivateSubnetC]
      Tags:
        - Key: 'ProjectName'
          Value: !Ref ProjectName

  #########################################
  # InternetGateway
  #########################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: 'ProjectName'
          Value: !Ref ProjectName
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #########################################
  # PublicRouteTable
  #########################################
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'ProjectName'
          Value: !Ref ProjectName
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  #########################################
  # NATGateway
  # EIPでPrivateSubnet内のリソースにアクセスする用
  # PrivateSubnetへの通信はALBのみに制限するのが、よりセキュア
  # 特に用がないなら削除推奨
  #########################################
  NatGatewayAAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NatGatewayCAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAAttachment.AllocationId
      SubnetId: !Ref PublicSubnetA
  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayCAttachment.AllocationId
      SubnetId: !Ref PublicSubnetC

  #########################################
  # PrivateRouteTable
  #########################################
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayA
  PrivateRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayC
  PrivateRouteTableCAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC

  #########################################
  # VPCEndpoint sample
  #########################################
#  DynamoDBEndpoint:
#    Type: AWS::EC2::VPCEndpoint
#    Properties:
#      PolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: Allow
#            Action: "*"
#            Principal: "*"
#            Resource: "*"
#      RouteTableIds:
#        - !Ref PrivateRouteTableA
#        - !Ref PrivateRouteTableC
#      ServiceName: !Join [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".dynamodb" ] ]
#      VpcId: !Ref 'VPC'

  #########################################
  # SecurityGroup For FargateContainer
  #########################################
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref VPC

  #########################################
  # SecurityGroup Inbound Rule
  #########################################
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSG
  EcsSecurityGroupIngressFromPrivateALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the private ALB
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PrivateLoadBalancerSG
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup
  PrivateLoadBalancerIngressFromECS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Only accept traffic from a container in the fargate container security group
      GroupId: !Ref PrivateLoadBalancerSG
      IpProtocol: -1
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup

  #########################################
  # Public LoadBalancer
  #########################################
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from Ipv4
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIpv6: ::/0
          Description: from Ipv6
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: -1
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: GatewayAttachement
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 30
        - Key: deletion_protection.enabled
          Value: true
        - Key: access_logs.s3.enabled
          Value: true
#        - Key: access_logs.s3.bucket
#          Value: !Sub ${ProjectName}-public-load-balancer-log # TODO: バケット作成
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetC
      SecurityGroups:
        - !Ref PublicLoadBalancerSG

  #########################################
  # Target Group
  # Attach to Public LoadBalancer
  #########################################
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'AWS::StackName', 'drop-1']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref DummyTargetGroupPublic
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  #########################################
  # Private LoadBalancer
  #########################################
  PrivateLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the internal load balancer
      VpcId: !Ref VPC
  PrivateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 30
        - Key: deletion_protection.enabled
          Value: true
        - Key: access_logs.s3.enabled
          Value: true
#        - Key: access_logs.s3.bucket
#          Value: !Sub ${ProjectName}-private-load-balancer-log # TODO: バケット作成
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
      SecurityGroups: [!Ref PrivateLoadBalancerSG]

  #########################################
  # Target Group
  # Attach to Private LoadBalancer
  #########################################
  DummyTargetGroupPrivate:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'AWS::StackName', 'drop-2']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  PrivateLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PrivateLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref DummyTargetGroupPrivate
          Type: forward
      LoadBalancerArn: !Ref PrivateLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  InternalUrl:
    Description: The url of the internal load balancer
    Value: !Join ['', ['http://', !GetAtt PrivateLoadBalancer.DNSName]]
    Export:
      Name: !Join [ ':', [ !Ref AWS::StackName, 'InternalUrl' ] ]
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt PublicLoadBalancer.DNSName]]
    Export:
      Name: !Join [ ':', [ !Ref AWS::StackName, 'ExternalUrl' ] ]
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Join [ ':', [ !Ref AWS::StackName, 'PublicListener' ] ]
  PrivateListener:
    Description: The ARN of the private load balancer's Listener
    Value: !Ref PrivateLoadBalancerListener
    Export:
      Name: !Join [ ':', [ !Ref AWS::StackName, 'PrivateListener' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref VPC
    Export:
      Name: !Join [ ':', [ !Ref AWS::StackName, 'VPCId' ] ]
  PublicSubnetA:
    Description: Public subnet one
    Value: !Ref PublicSubnetA
    Export:
      Name: !Join [ ':', [ !Ref AWS::StackName, 'PublicSubnetA' ] ]
  PublicSubnetC:
    Description: Public subnet two
    Value: !Ref PublicSubnetC
    Export:
      Name: !Join [ ':', [ !Ref AWS::StackName, 'PublicSubnetC' ] ]
  PrivateSubnetA:
    Description: Private subnet one
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Join [ ':', [ !Ref AWS::StackName, 'PrivateSubnetA' ] ]
  PrivateSubnetC:
    Description: Private subnet two
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Join [ ':', [ !Ref AWS::StackName, 'PrivateSubnetC' ] ]
  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref FargateContainerSecurityGroup
    Export:
      Name: !Join [ ':', [ !Ref AWS::StackName, 'FargateContainerSecurityGroup' ] ]
