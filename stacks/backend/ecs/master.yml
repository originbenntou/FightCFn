AWSTemplateFormatVersion: '2010-09-09'
Description: >
  ECSCluster,Service,Task,LoadBalancer,SecurityGroup

Parameters:
  ProductName:
    Type: String
  Env:
    Type: String
    AllowedValues:
      - dev
      - stg
      - prd

  #########################################
  # Parameters For ECS
  #########################################
  ImageUrl:
    Type: String
    Default: '743530693495.dkr.ecr.ap-northeast-1.amazonaws.com/fight'
  ContainerPort:
    Type: Number
    Default: 8080
  ContainerCpu:
    Type: Number
    Default: 256
  ContainerMemory:
    Type: Number
    Default: 512
  Path:
    Type: String
    Default: '*'
  Priority:
    Type: Number
    Default: 1
  DesiredCount:
    Type: Number
    Default: 2

Resources:
  #########################################
  # Security Group For Public Load Balancer
  #########################################
  PublicLoadBalancerSecurityGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/security_group.yml'
      Parameters:
        VPC: !ImportValue VPC
        ProductName: !Ref ProductName
        Env: !Ref Env
  PublicALBSecurityGroupIngressFromIGWIPv4:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/ingress_from_gw.yml'
      Parameters:
        GroupId: !GetAtt PublicLoadBalancerSecurityGroup.Outputs.SecurityGroupId
        CidrIp: '0.0.0.0/0'
        CidrIpv6: ''
        IpProtocol: tcp
        FromPort: 80
        ToPort: 8080
  PublicALBSecurityGroupIngressFromIGWIPv6:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/ingress_from_gw.yml'
      Parameters:
        GroupId: !GetAtt PublicLoadBalancerSecurityGroup.Outputs.SecurityGroupId
        CidrIp: ''
        CidrIpv6: '::/0'
        IpProtocol: tcp
        FromPort: 80
        ToPort: 8080
# もしかしてEgressは勝手にできてる...？
#  PublicALBSecurityGroupEgressToIGW:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL: '../../../templates/vpc/egress.yml'
#      Parameters:
#        GroupId: !GetAtt PublicLoadBalancerSecurityGroup.Outputs.SecurityGroupId
#        CidrIp: '0.0.0.0/0'
#        IpProtocol: -1

  #########################################
  # Security Group For Private Load Balancer
  #########################################
  PrivateLoadBalancerSecurityGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/security_group.yml'
      Parameters:
        VPC: !ImportValue VPC
        ProductName: !Ref ProductName
        Env: !Ref Env
  PrivateALBSecurityGroupIngressFromECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/ingress_from_sg.yml'
      Parameters:
        IpProtocol: '-1'
        GroupId: !GetAtt PrivateLoadBalancerSecurityGroup.Outputs.SecurityGroupId
        SourceSecurityGroupId: !GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId

  #########################################
  # Security Group For ECS
  #########################################
  ECSContainerSecurityGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/security_group.yml'
      Parameters:
        VPC: !ImportValue VPC
        ProductName: !Ref ProductName
        Env: !Ref Env
  ECSSecurityGroupIngressFromPublicALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/ingress_from_sg.yml'
      Parameters:
        IpProtocol: '-1'
        GroupId: !GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId
        SourceSecurityGroupId: !GetAtt PublicLoadBalancerSecurityGroup.Outputs.SecurityGroupId
  ECSSecurityGroupIngressFromPrivateALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/ingress_from_sg.yml'
      Parameters:
        IpProtocol: '-1'
        GroupId: !GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId
        SourceSecurityGroupId: !GetAtt PrivateLoadBalancerSecurityGroup.Outputs.SecurityGroupId
  ECSSecurityGroupIngressFromSelf:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/ingress_from_sg.yml'
      Parameters:
        IpProtocol: '-1'
        GroupId: !GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId
        SourceSecurityGroupId: !GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId

  #########################################
  # Public Load Balancer
  #########################################
  PublicLoadBalancer:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/ec2/load_balancer.yml'
      Parameters:
        Scheme: 'internet-facing'
        Subnets: !Join [ ',', [!ImportValue PublicSubnetA, !ImportValue PublicSubnetC] ]
        SecurityGroups: !Join [ ',', [!GetAtt PublicLoadBalancerSecurityGroup.Outputs.SecurityGroupId] ]
        ProductName: !Ref ProductName
        Env: !Ref Env

  #########################################
  # TargetGroup For Public ALB
  #########################################
  DefaultTargetGroupForPublicALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/ec2/target_group.yml'
      Parameters:
        VpcId: !ImportValue VPC
        ProductName: !Ref ProductName
        Env: !Ref Env
  DefaultTargetGroupListenerForPublicALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/ec2/target_group_listener.yml'
      Parameters:
        TargetGroupArn: !GetAtt DefaultTargetGroupForPublicALB.Outputs.TargetGroupArn
        LoadBalancerArn: !GetAtt PublicLoadBalancer.Outputs.LoadBalancerArn
        ProductName: !Ref ProductName
        Env: !Ref Env

  #########################################
  # Private Load Balancer
  #########################################
  PrivateLoadBalancer:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/ec2/load_balancer.yml'
      Parameters:
        Scheme: 'internal'
        Subnets: !Join [ ',', [!ImportValue PrivateSubnetA, !ImportValue PrivateSubnetC] ]
        SecurityGroups: !Join [ ',', [!GetAtt PrivateLoadBalancerSecurityGroup.Outputs.SecurityGroupId] ]
        ProductName: !Ref ProductName
        Env: !Ref Env

  #########################################
  # TargetGroup For Private ALB
  #########################################
  DefaultTargetGroupForPrivateALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/ec2/target_group.yml'
      Parameters:
        VpcId: !ImportValue VPC
        ProductName: !Ref ProductName
        Env: !Ref Env
  DefaultTargetGroupListenerForPrivateALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/ec2/target_group_listener.yml'
      Parameters:
        TargetGroupArn: !GetAtt DefaultTargetGroupForPrivateALB.Outputs.TargetGroupArn
        LoadBalancerArn: !GetAtt PrivateLoadBalancer.Outputs.LoadBalancerArn
        ProductName: !Ref ProductName
        Env: !Ref Env

  #########################################
  # TargetGroup To ECS
  #########################################
  TargetGroupForECS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: '/'
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub ${ProductName}-service-${Env}
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue VPC
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroupForECS
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref Path]
      ListenerArn: !GetAtt DefaultTargetGroupListenerForPublicALB.Outputs.TargetGroupListener
      Priority: !Ref Priority

  #########################################
  # ECS Cluster
  #########################################
  ECSCluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/ecs/cluster.yml'
      Parameters:
        ProductName: !Ref ProductName
        Env: !Ref Env

  #########################################
  # ECS Task
  #########################################
  ECSTask:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/ecs/task.yml'
      Parameters:
        ContainerCpu: !Ref ContainerCpu
        ContainerMemory: !Ref ContainerMemory
        ImageUrl: !Ref ImageUrl
        ContainerPort: !Ref ContainerPort
        ExecutionRoleArn: !Ref ECSTaskExecutionRole
        ProductName: !Ref ProductName
        Env: !Ref Env

  #########################################
  # ECS Service
  #########################################
  ECSService:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/ecs/service.yml'
      Parameters:
        ClusterArn: !GetAtt ECSCluster.Outputs.ECSClusterArn
        DesiredCount: !Ref DesiredCount
        SecurityGroups: !Join [ ',', [!GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId] ]
        Subnets: !Join [ ',', [!ImportValue PrivateSubnetA, !ImportValue PrivateSubnetC] ]
        TaskDefinitionArn: !GetAtt ECSTask.Outputs.TaskDefinitionArn
        ContainerPort: !Ref ContainerPort
        TargetGroupArn: !Ref TargetGroupForECS
        ProductName: !Ref ProductName
        Env: !Ref Env

  #########################################
  # IAM
  #########################################

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'
                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'
  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

Outputs:
  PublicLoadBalancerDnsName:
    Value: !GetAtt PublicLoadBalancer.Outputs.LoadBalancerDnsName
