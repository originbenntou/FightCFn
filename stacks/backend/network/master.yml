AWSTemplateFormatVersion: '2010-09-09'
Description: >
  ECSCluster,Service,Task,LoadBalancer,SecurityGroup

Parameters:
  ProductName:
    Type: String
  Env:
    Type: String
    AllowedValues:
      - dev
      - stg
      - prd

  #########################################
  # Parameters For ECS
  #########################################
  ContainerPort:
    Type: Number
    Default: 8080
  Path:
    Type: String
    Default: '*'
  Priority:
    Type: Number
    Default: 1

Resources:
  #########################################
  # NATGateway
  # EIPでPrivateSubnet内のリソースにアクセスする用
  # PrivateSubnetへの通信はALBのみに制限するのが、よりセキュア 特に用がないなら削除推奨
  #########################################
  # NatGateway取り外し
  #  NatGatewayA:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../templates/vpc/nat_gateway.yml'
  #      Parameters:
  #        SubnetId: !GetAtt PublicSubnetA.Outputs.SubnetId
  #        ProductName: !Ref ProductName
  #        Env: !Ref Env
  #  NatGatewayC:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../templates/vpc/nat_gateway.yml'
  #      Parameters:
  #        SubnetId: !GetAtt PublicSubnetC.Outputs.SubnetId
  #        ProductName: !Ref ProductName
  #        Env: !Ref Env

  #########################################
  # PrivateRouteTable
  #########################################
  # NatGateway取り外し あとroute tableってAとCで2ついるっけ...？
  #  PrivateRouteTableA:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../templates/vpc/route_table.yml'
  #      Parameters:
  #        VPC: !GetAtt VPC.Outputs.VpcId
  #        ProductName: !Ref ProductName
  #        Env: !Ref Env
  #        Name: !Sub ${ProductName}-${Env}-private-route-table-a
  #  PrivateRouteA:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../templates/vpc/route.yml'
  #      Parameters:
  #        RouteTableId: PrivateRouteTableA.Outputs.RouteTable
  #        GatewayId: ''
  #        NatGatewayId: !GetAtt NatGatewayA.Outputs.NatGateway
  #  PrivateSubnetARouteTableAssociation:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../templates/vpc/route_table_associate.yml'
  #      Parameters:
  #        SubnetId: !GetAtt PrivateSubnetA.Outputs.SubnetId
  #        RouteTableId: !GetAtt PrivateRouteTableA.Outputs.RouteTable
  #  PrivateRouteTableC:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../templates/vpc/route_table.yml'
  #      Parameters:
  #        VPC: !GetAtt VPC.Outputs.VpcId
  #        ProductName: !Ref ProductName
  #        Env: !Ref Env
  #        Name: !Sub ${ProductName}-${Env}-private-route-table-a
  #  PrivateRouteC:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../templates/vpc/route.yml'
  #      Parameters:
  #        RouteTableId: PrivateRouteTableA.Outputs.RouteTable
  #        GatewayId: ''
  #        NatGatewayId: !GetAtt NatGatewayC.Outputs.NatGateway
  #  PrivateSubnetCRouteTableAssociation:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../templates/vpc/route_table_associate.yml'
  #      Parameters:
  #        SubnetId: !GetAtt PrivateSubnetC.Outputs.SubnetId
  #        RouteTableId: !GetAtt PrivateRouteTableC.Outputs.RouteTable

  #########################################
  # Security Group For Private Load Balancer
  #########################################
  #  PrivateLoadBalancerSecurityGroup:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../../templates/vpc/security_group.yml'
  #      Parameters:
  #        VPC: !ImportValue VPC
  #        ProductName: !Ref ProductName
  #        Env: !Ref Env
  #        Name: !Sub ${ProductName}-${Env}-private-lb-sg
  #  PrivateALBSecurityGroupIngressFromECS:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../../templates/vpc/ingress_from_sg.yml'
  #      Parameters:
  #        IpProtocol: '-1'
  #        FromPort: ''
  #        ToPort: ''
  #        GroupId: !GetAtt PrivateLoadBalancerSecurityGroup.Outputs.SecurityGroupId
  #        SourceSecurityGroupId: !GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId

  #########################################
  # Private Load Balancer
  #########################################
  #  PrivateLoadBalancer:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../../templates/ec2/load_balancer.yml'
  #      Parameters:
  #        Scheme: 'internal'
  #        Subnets: !Join [ ',', [!ImportValue PrivateSubnetA, !ImportValue PrivateSubnetC] ]
  #        SecurityGroups: !Join [ ',', [!GetAtt PrivateLoadBalancerSecurityGroup.Outputs.SecurityGroupId] ]
  #        ProductName: !Ref ProductName
  #        Env: !Ref Env

  #########################################
  # TargetGroup For Private ALB
  #########################################
  #  DefaultTargetGroupForPrivateALB:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../../templates/ec2/target_group.yml'
  #      Parameters:
  #        VpcId: !ImportValue VPC
  #        ProductName: !Ref ProductName
  #        Env: !Ref Env
  #        Name: !Sub ${ProductName}-${Env}-default-tg-for-private-alb
  #  DefaultTargetGroupListenerForPrivateALB:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../../templates/ec2/target_group_listener.yml'
  #      Parameters:
  #        TargetGroupArn: !GetAtt DefaultTargetGroupForPrivateALB.Outputs.TargetGroupArn
  #        LoadBalancerArn: !GetAtt PrivateLoadBalancer.Outputs.LoadBalancerArn

  #########################################
  # Security Group For Public Load Balancer
  #########################################
  PublicLoadBalancerSecurityGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/security_group.yml'
      Parameters:
        VPC: !ImportValue VPC
        ProductName: !Ref ProductName
        Env: !Ref Env
        Name: !Sub public-lb-sg-${Env}
  PublicALBSecurityGroupIngressFromIGWIPv4:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/ingress_from_gw.yml'
      Parameters:
        GroupId: !GetAtt PublicLoadBalancerSecurityGroup.Outputs.SecurityGroupId
        CidrIp: '0.0.0.0/0'
        CidrIpv6: ''
        IpProtocol: tcp
        FromPort: 80
        ToPort: 8080
  PublicALBSecurityGroupIngressFromIGWIPv6:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/ingress_from_gw.yml'
      Parameters:
        GroupId: !GetAtt PublicLoadBalancerSecurityGroup.Outputs.SecurityGroupId
        CidrIp: ''
        CidrIpv6: '::/0'
        IpProtocol: tcp
        FromPort: 80
        ToPort: 8080

  # もしかしてEgressは勝手にできてる...？
  #  PublicALBSecurityGroupEgressToIGW:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../../templates/vpc/egress.yml'
  #      Parameters:
  #        GroupId: !GetAtt PublicLoadBalancerSecurityGroup.Outputs.SecurityGroupId
  #        CidrIp: '0.0.0.0/0'
  #        IpProtocol: -1

  #########################################
  # Security Group For ECS
  #########################################
  ECSContainerSecurityGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/security_group.yml'
      Parameters:
        VPC: !ImportValue VPC
        ProductName: !Ref ProductName
        Env: !Ref Env
        Name: !Sub ecs-container-sg-${Env}
  ECSSecurityGroupIngressFromPublicALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/ingress_from_sg.yml'
      Parameters:
        IpProtocol: '-1'
        FromPort: ''
        ToPort: ''
        GroupId: !GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId
        SourceSecurityGroupId: !GetAtt PublicLoadBalancerSecurityGroup.Outputs.SecurityGroupId
  ECSSecurityGroupIngressFromSelf:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/ingress_from_sg.yml'
      Parameters:
        IpProtocol: '-1'
        FromPort: ''
        ToPort: ''
        GroupId: !GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId
        SourceSecurityGroupId: !GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId

  # NatGateway→PrivateALBを消しているので、これも不要
  #  ECSSecurityGroupIngressFromPrivateALB:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL: '../../../templates/vpc/ingress_from_sg.yml'
  #      Parameters:
  #        IpProtocol: '-1'
  #        FromPort: ''
  #        ToPort: ''
  #        GroupId: !GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId
  #        SourceSecurityGroupId: !GetAtt PrivateLoadBalancerSecurityGroup.Outputs.SecurityGroupId

  #########################################
  # Public Load Balancer
  #########################################
  PublicLoadBalancer:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/ec2/load_balancer.yml'
      Parameters:
        Scheme: 'internet-facing'
        Subnets: !Join [ ',', [!ImportValue PublicSubnetA, !ImportValue PublicSubnetC] ]
        SecurityGroups: !Join [ ',', [!GetAtt PublicLoadBalancerSecurityGroup.Outputs.SecurityGroupId] ]
        ProductName: !Ref ProductName
        Env: !Ref Env
        Name: !Sub public-lb-${Env}

  #########################################
  # TargetGroup For Public ALB
  #########################################
  DefaultTargetGroupForPublicALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/ec2/target_group.yml'
      Parameters:
        VpcId: !ImportValue VPC
        ProductName: !Ref ProductName
        Env: !Ref Env
        Name: !Sub default-tg-for-public-alb-${Env}
  DefaultTargetGroupListenerForPublicALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/ec2/target_group_listener.yml'
      Parameters:
        TargetGroupArn: !GetAtt DefaultTargetGroupForPublicALB.Outputs.TargetGroupArn
        LoadBalancerArn: !GetAtt PublicLoadBalancer.Outputs.LoadBalancerArn

  #########################################
  # TargetGroup To ECS
  # FIXME: nested stackに！
  #########################################
  TargetGroupForECS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: '/'
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub tg-for-ecs-${Env}
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue VPC
      Tags:
        - Key: 'ProductName'
          Value: !Ref ProductName
        - Key: 'Env'
          Value: !Ref Env
        - Key: 'Name'
          Value: !Sub tg-for-ecs-${Env}
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroupForECS
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref Path]
      ListenerArn: !GetAtt DefaultTargetGroupListenerForPublicALB.Outputs.TargetGroupListener
      Priority: !Ref Priority

  #########################################
  # Security Group For VPCEndpoint
  #########################################
  VPCEndpointSecurityGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/security_group.yml'
      Parameters:
        VPC: !ImportValue VPC
        ProductName: !Ref ProductName
        Env: !Ref Env
        Name: !Sub vpcendpoint-sg-${Env}
  VPCEndpointSecurityGroupIngress:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/ingress_from_sg.yml'
      Parameters:
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        GroupId: !GetAtt VPCEndpointSecurityGroup.Outputs.SecurityGroupId
        SourceSecurityGroupId: !GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId
  VPCEndpointSecurityGroupEgress:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/egress.yml'
      Parameters:
        GroupId: !GetAtt VPCEndpointSecurityGroup.Outputs.SecurityGroupId
        CidrIp: '0.0.0.0/0'
        IpProtocol: -1

  #########################################
  # RouteTable For ECS VPCEndpoint（Gateway）
  #########################################
  RouteTableForECSVPCEndpoint:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/route_table.yml'
      Parameters:
        VPC: !ImportValue VPC
        ProductName: !Ref ProductName
        Env: !Ref Env
        Name: !Sub route-table-for-ecs-vpcendpoint-${Env}
  PrivateSubnetARouteTableForECSVPCEndpointAssociation:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/route_table_associate.yml'
      Parameters:
        SubnetId: !ImportValue PrivateSubnetA
        RouteTableId: !GetAtt RouteTableForECSVPCEndpoint.Outputs.RouteTable
  PrivateSubnetCRouteTableForECSVPCEndpointAssociation:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/route_table_associate.yml'
      Parameters:
        SubnetId: !ImportValue PrivateSubnetC
        RouteTableId: !GetAtt RouteTableForECSVPCEndpoint.Outputs.RouteTable

  #########################################
  # VPCEndpoint
  #########################################
  VPCEndpointECRApi:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/vpc_endpoint.yml'
      Parameters:
        ServiceName: 'com.amazonaws.ap-northeast-1.ecr.api'
        VpcEndpointType: Interface
        PrivateDnsEnabled: true
        VpcId: !ImportValue VPC
        SubnetIds: !Join [ ',', [!ImportValue PrivateSubnetAForVPCEndpoint, !ImportValue PrivateSubnetCForVPCEndpoint] ]
        SecurityGroupIds: !Join [ ',', [ !GetAtt VPCEndpointSecurityGroup.Outputs.SecurityGroupId ] ]
        RouteTableIds: ''
  VPCEndpointECRDkr:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/vpc_endpoint.yml'
      Parameters:
        ServiceName: 'com.amazonaws.ap-northeast-1.ecr.dkr'
        VpcEndpointType: Interface
        PrivateDnsEnabled: true
        VpcId: !ImportValue VPC
        SubnetIds: !Join [ ',', [!ImportValue PrivateSubnetAForVPCEndpoint, !ImportValue PrivateSubnetCForVPCEndpoint] ]
        SecurityGroupIds: !Join [ ',', [ !GetAtt VPCEndpointSecurityGroup.Outputs.SecurityGroupId ] ]
        RouteTableIds: ''
  VPCEndpointS3:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: '../../../templates/vpc/vpc_endpoint.yml'
      Parameters:
        ServiceName: 'com.amazonaws.ap-northeast-1.s3'
        VpcEndpointType: Gateway
        VpcId: !ImportValue VPC
        SubnetIds: ''
        SecurityGroupIds: ''
        RouteTableIds: !Join [ ',', [ !GetAtt RouteTableForECSVPCEndpoint.Outputs.RouteTable ] ]

Outputs:
  PublicLoadBalancerDnsName:
    Value: !GetAtt PublicLoadBalancer.Outputs.LoadBalancerDnsName

  ECSContainerSecurityGroup:
    Value: !GetAtt ECSContainerSecurityGroup.Outputs.SecurityGroupId
    Export:
      Name: ECSContainerSecurityGroup
  TargetGroupForECS:
    Value: !Ref TargetGroupForECS
    Export:
      Name: TargetGroupForECS
