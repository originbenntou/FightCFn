AWSTemplateFormatVersion: '2010-09-09'
Description: "ECSCluster,Service,Task,LoadBalancer,SecurityGroup\n"
Parameters:
  ProductName:
    Type: String
  Env:
    Type: String
    AllowedValues:
    - dev
    - stg
    - prd
  ContainerPort:
    Type: Number
    Default: 8080
  Path:
    Type: String
    Default: '*'
  Priority:
    Type: Number
    Default: 1
Resources:
  PublicLoadBalancerSecurityGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/347b60c54a86706f84beacb86f7f3392.template
      Parameters:
        VPC:
          Fn::ImportValue: VPC
        ProductName:
          Ref: ProductName
        Env:
          Ref: Env
        Name:
          Fn::Sub: public-lb-sg-${Env}
  PublicALBSecurityGroupIngressFromIGWIPv4:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/026036423ca073e00e362c7723d37cfd.template
      Parameters:
        GroupId:
          Fn::GetAtt:
          - PublicLoadBalancerSecurityGroup
          - Outputs.SecurityGroupId
        CidrIp: 0.0.0.0/0
        CidrIpv6: ''
        IpProtocol: tcp
        FromPort: 80
        ToPort: 8080
  PublicALBSecurityGroupIngressFromIGWIPv6:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/026036423ca073e00e362c7723d37cfd.template
      Parameters:
        GroupId:
          Fn::GetAtt:
          - PublicLoadBalancerSecurityGroup
          - Outputs.SecurityGroupId
        CidrIp: ''
        CidrIpv6: ::/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 8080
  ECSContainerSecurityGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/347b60c54a86706f84beacb86f7f3392.template
      Parameters:
        VPC:
          Fn::ImportValue: VPC
        ProductName:
          Ref: ProductName
        Env:
          Ref: Env
        Name:
          Fn::Sub: ecs-container-sg-${Env}
  ECSSecurityGroupIngressFromPublicALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/b45906466c1103745f63aabdeb9a570a.template
      Parameters:
        IpProtocol: '-1'
        FromPort: ''
        ToPort: ''
        GroupId:
          Fn::GetAtt:
          - ECSContainerSecurityGroup
          - Outputs.SecurityGroupId
        SourceSecurityGroupId:
          Fn::GetAtt:
          - PublicLoadBalancerSecurityGroup
          - Outputs.SecurityGroupId
  ECSSecurityGroupIngressFromSelf:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/b45906466c1103745f63aabdeb9a570a.template
      Parameters:
        IpProtocol: '-1'
        FromPort: ''
        ToPort: ''
        GroupId:
          Fn::GetAtt:
          - ECSContainerSecurityGroup
          - Outputs.SecurityGroupId
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ECSContainerSecurityGroup
          - Outputs.SecurityGroupId
  PublicLoadBalancer:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/1e67d5eae25bac5902408f86be60afcf.template
      Parameters:
        Scheme: internet-facing
        Subnets:
          Fn::Join:
          - ','
          - - Fn::ImportValue: PublicSubnetA
            - Fn::ImportValue: PublicSubnetC
        SecurityGroups:
          Fn::Join:
          - ','
          - - Fn::GetAtt:
              - PublicLoadBalancerSecurityGroup
              - Outputs.SecurityGroupId
        ProductName:
          Ref: ProductName
        Env:
          Ref: Env
        Name:
          Fn::Sub: public-lb-${Env}
  DefaultTargetGroupForPublicALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/95ea41ae961c546d8b48c126c69a7c9a.template
      Parameters:
        VpcId:
          Fn::ImportValue: VPC
        ProductName:
          Ref: ProductName
        Env:
          Ref: Env
        Name:
          Fn::Sub: default-tg-for-public-alb-${Env}
  DefaultTargetGroupListenerForPublicALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/7ef3d77edf2fdd39bad265871b9eb47b.template
      Parameters:
        TargetGroupArn:
          Fn::GetAtt:
          - DefaultTargetGroupForPublicALB
          - Outputs.TargetGroupArn
        LoadBalancerArn:
          Fn::GetAtt:
          - PublicLoadBalancer
          - Outputs.LoadBalancerArn
  TargetGroupForECS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name:
        Fn::Sub: tg-for-ecs-${Env}
      Port:
        Ref: ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: VPC
      Tags:
      - Key: ProductName
        Value:
          Ref: ProductName
      - Key: Env
        Value:
          Ref: Env
      - Key: Name
        Value:
          Fn::Sub: tg-for-ecs-${Env}
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn:
          Ref: TargetGroupForECS
        Type: forward
      Conditions:
      - Field: path-pattern
        Values:
        - Ref: Path
      ListenerArn:
        Fn::GetAtt:
        - DefaultTargetGroupListenerForPublicALB
        - Outputs.TargetGroupListener
      Priority:
        Ref: Priority
  VPCEndpointSecurityGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/347b60c54a86706f84beacb86f7f3392.template
      Parameters:
        VPC:
          Fn::ImportValue: VPC
        ProductName:
          Ref: ProductName
        Env:
          Ref: Env
        Name:
          Fn::Sub: vpcendpoint-sg-${Env}
  VPCEndpointSecurityGroupIngress:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/b45906466c1103745f63aabdeb9a570a.template
      Parameters:
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        GroupId:
          Fn::GetAtt:
          - VPCEndpointSecurityGroup
          - Outputs.SecurityGroupId
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ECSContainerSecurityGroup
          - Outputs.SecurityGroupId
  VPCEndpointSecurityGroupEgress:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/7fc29ae5d352f21c2d33d514c9d2eb0a.template
      Parameters:
        GroupId:
          Fn::GetAtt:
          - VPCEndpointSecurityGroup
          - Outputs.SecurityGroupId
        CidrIp: 0.0.0.0/0
        IpProtocol: -1
  RouteTableForECSVPCEndpoint:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/843d3694e89bdf405398c2f338273784.template
      Parameters:
        VPC:
          Fn::ImportValue: VPC
        ProductName:
          Ref: ProductName
        Env:
          Ref: Env
        Name:
          Fn::Sub: route-table-for-ecs-vpcendpoint-${Env}
  PrivateSubnetARouteTableForECSVPCEndpointAssociation:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/9faaf1b362a9c4d938f2b9f67342040b.template
      Parameters:
        SubnetId:
          Fn::ImportValue: PrivateSubnetA
        RouteTableId:
          Fn::GetAtt:
          - RouteTableForECSVPCEndpoint
          - Outputs.RouteTable
  PrivateSubnetCRouteTableForECSVPCEndpointAssociation:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/9faaf1b362a9c4d938f2b9f67342040b.template
      Parameters:
        SubnetId:
          Fn::ImportValue: PrivateSubnetC
        RouteTableId:
          Fn::GetAtt:
          - RouteTableForECSVPCEndpoint
          - Outputs.RouteTable
  VPCEndpointECRApi:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/35cf01a9ca6d45b6630140d75f002ba2.template
      Parameters:
        ServiceName: com.amazonaws.ap-northeast-1.ecr.api
        VpcEndpointType: Interface
        PrivateDnsEnabled: true
        VpcId:
          Fn::ImportValue: VPC
        SubnetIds:
          Fn::Join:
          - ','
          - - Fn::ImportValue: PrivateSubnetAForVPCEndpoint
            - Fn::ImportValue: PrivateSubnetCForVPCEndpoint
        SecurityGroupIds:
          Fn::Join:
          - ','
          - - Fn::GetAtt:
              - VPCEndpointSecurityGroup
              - Outputs.SecurityGroupId
        RouteTableIds: ''
  VPCEndpointECRDkr:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/35cf01a9ca6d45b6630140d75f002ba2.template
      Parameters:
        ServiceName: com.amazonaws.ap-northeast-1.ecr.dkr
        VpcEndpointType: Interface
        PrivateDnsEnabled: true
        VpcId:
          Fn::ImportValue: VPC
        SubnetIds:
          Fn::Join:
          - ','
          - - Fn::ImportValue: PrivateSubnetAForVPCEndpoint
            - Fn::ImportValue: PrivateSubnetCForVPCEndpoint
        SecurityGroupIds:
          Fn::Join:
          - ','
          - - Fn::GetAtt:
              - VPCEndpointSecurityGroup
              - Outputs.SecurityGroupId
        RouteTableIds: ''
  VPCEndpointS3:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/35cf01a9ca6d45b6630140d75f002ba2.template
      Parameters:
        ServiceName: com.amazonaws.ap-northeast-1.s3
        VpcEndpointType: Gateway
        VpcId:
          Fn::ImportValue: VPC
        SubnetIds: ''
        SecurityGroupIds: ''
        RouteTableIds:
          Fn::Join:
          - ','
          - - Fn::GetAtt:
              - RouteTableForECSVPCEndpoint
              - Outputs.RouteTable
  RouteTableForDB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/843d3694e89bdf405398c2f338273784.template
      Parameters:
        VPC:
          Fn::ImportValue: VPC
        ProductName:
          Ref: ProductName
        Env:
          Ref: Env
        Name:
          Fn::Sub: route-table-for-db-${Env}
  PrivateSubnetARouteTableForDBAssociation:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/9faaf1b362a9c4d938f2b9f67342040b.template
      Parameters:
        SubnetId:
          Fn::ImportValue: PrivateSubnetAForDB
        RouteTableId:
          Fn::GetAtt:
          - RouteTableForDB
          - Outputs.RouteTable
  PrivateSubnetCRouteTableForDBAssociation:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/9faaf1b362a9c4d938f2b9f67342040b.template
      Parameters:
        SubnetId:
          Fn::ImportValue: PrivateSubnetCForDB
        RouteTableId:
          Fn::GetAtt:
          - RouteTableForDB
          - Outputs.RouteTable
  DBSecurityGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/347b60c54a86706f84beacb86f7f3392.template
      Parameters:
        VPC:
          Fn::ImportValue: VPC
        ProductName:
          Ref: ProductName
        Env:
          Ref: Env
        Name:
          Fn::Sub: db-sg-${Env}
  DBSecurityGroupIngress:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/b45906466c1103745f63aabdeb9a570a.template
      Parameters:
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        GroupId:
          Fn::GetAtt:
          - DBSecurityGroup
          - Outputs.SecurityGroupId
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ECSContainerSecurityGroup
          - Outputs.SecurityGroupId
  DBSecurityGroupEgress:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ap-northeast-1.amazonaws.com/cfn-template-myproduct-dev/backend-network/7fc29ae5d352f21c2d33d514c9d2eb0a.template
      Parameters:
        GroupId:
          Fn::GetAtt:
          - DBSecurityGroup
          - Outputs.SecurityGroupId
        CidrIp: 0.0.0.0/0
        IpProtocol: -1
Outputs:
  PublicLoadBalancerDnsName:
    Value:
      Fn::GetAtt:
      - PublicLoadBalancer
      - Outputs.LoadBalancerDnsName
  ECSContainerSecurityGroup:
    Value:
      Fn::GetAtt:
      - ECSContainerSecurityGroup
      - Outputs.SecurityGroupId
    Export:
      Name: ECSContainerSecurityGroup
  TargetGroupForECS:
    Value:
      Ref: TargetGroupForECS
    Export:
      Name: TargetGroupForECS
  DBSecurityGroup:
    Value:
      Fn::GetAtt:
      - DBSecurityGroup
      - Outputs.SecurityGroupId
    Export:
      Name: DBSecurityGroup
